pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;
pragma AbiHeader time;

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "@broxus/contracts/contracts/access/InternalOwner.tsol";

import "./interfaces/ISubscriptionsCollection.tsol";
import "./interfaces/IMarketCallback.tsol";
import "./interfaces/IUpgradable.tsol";

contract SubscriptionsMarket is InternalOwner, IUpgradable {

    struct Rate {
        uint128 price;
        uint64 duration;
    }

    uint128 constant BASE_BALANCE = 1 ever;
    uint128 constant BUY_GAS = 0.6 ever;

    address collection_;
    mapping(uint64 => Rate) rates_;

    uint256 public totalSold;
    uint256 public totalWithdraw;


    constructor(address _owner) public {
        tvm.accept();
        setOwnership(_owner);
    }

    function setCollection(address _collection) external onlyOwner {
        collection_ = _collection;
    }

    function collection() external view responsible returns(address) {
        return {value: 0, flag: 64, bounce: false} collection_;
    }

    function setRates(mapping(uint64 => Rate) _rates) external onlyOwner {
        rates_ = _rates;
    }

    function rates() external view responsible returns(mapping(uint64 => Rate) _rates) {
        return {value: 0, flag: 64, bounce: false} rates_;
    }

    function buy(uint64 callbackId, uint64 rateId) external {
        require(rates_.exists(rateId));

        Rate rate = rates_[rateId];

        if (msg.value > rate.price + BUY_GAS) {
            totalSold += rate.price;

            tvm.rawReserve(totalSold - totalWithdraw + BASE_BALANCE, 0);

            IMarketCallback(msg.sender).operationSuccess{value: 0.001 ever, flag: 1, bounce: false}(callbackId);

            ISubscriptionsCollection(collection_).mintNft {value: 0, flag: 128, bounce: false}(
                msg.sender,
                now + rate.duration,
                msg.sender
            );

        } else {
            tvm.rawReserve(totalSold - totalWithdraw + BASE_BALANCE, 0);
            IMarketCallback(msg.sender).operationCancelled{value: 0, flag: 128, bounce: false}(callbackId);
        }
    }

    event Withdrawal(
        address recipient,
        address caller,
        uint128 amount
    );

    function withdraw(address recipient, uint128 amount) external onlyOwner {
        require(recipient.value != 0 && recipient != address(this), 2001);
        require(amount > 0 && amount <= totalSold - totalWithdraw, 2002);

        totalWithdraw += amount;

        tvm.rawReserve(totalSold - totalWithdraw + BASE_BALANCE, 0);

        emit Withdrawal(recipient, msg.sender, amount);

        recipient.transfer({
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
            bounce: false
        });
    }

    function upgrade(TvmCell _code, optional(address) _remainingGasTo) external override onlyOwner {
        tvm.rawReserve(totalSold - totalWithdraw + BASE_BALANCE, 0);

        address remainingGasTo = _remainingGasTo.hasValue() ? _remainingGasTo.get() : msg.sender;

        TvmCell data = abi.encode(
            remainingGasTo,
            owner,
            collection_,
            rates_,
            totalSold,
            totalWithdraw
        );

        tvm.setcode(_code);
        tvm.setCurrentCode(_code);

        onCodeUpgrade(data);
    }

    function onCodeUpgrade(TvmCell _data) private {
        tvm.resetStorage();

        address remainingGasTo;

        (
            remainingGasTo,
            owner,
            collection_,
            rates_,
            totalSold,
            totalWithdraw
        ) = abi.decode(_data, (
            address,
            address,
            address,
            mapping(uint64 => Rate),
            uint256,
            uint256
        ));

        emit Upgraded();

        remainingGasTo.transfer({
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
            bounce: false
        });
    }
}

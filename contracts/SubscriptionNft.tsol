pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

import '@broxus/tip4/contracts/interfaces/IBurnableCollection.tsol';
import "@broxus/tip4/contracts/TIP4_1/TIP4_1Nft.tsol";
import "@broxus/tip4/contracts/TIP4_2/interfaces/ITIP4_2JSON_Metadata.tsol";
import "@broxus/tip4/contracts/TIP4_3/TIP4_3Nft.tsol";
import "./structures/INftInfoStructure.tsol";
import "./libraries/NftJson.tsol";


contract SubscriptionNft is TIP4_1Nft, ITIP4_2JSON_Metadata, TIP4_3Nft, INftInfoStructure {

    uint64 expireAt_;
    uint64 rateId_;

    constructor(
        address owner,
        address sendGasTo,
        uint128 remainOnNft,
        uint64 _expireAt,
        uint64 _rateId,
        uint128 indexDeployValue,
        uint128 indexDestroyValue,
        TvmCell codeIndex
    ) TIP4_1Nft(
        owner,
        sendGasTo,
        remainOnNft
    ) TIP4_3Nft (
        indexDeployValue,
        indexDestroyValue,
        codeIndex
    ) public {
        _supportedInterfaces[
            bytes4(tvm.functionId(ITIP4_2JSON_Metadata.getJson))
        ] = true;

        expireAt_ = _expireAt;
        rateId_ = _rateId;
    }

    function expireAt() external view responsible returns (uint64 timestamp) {
        return {
            value: 0,
            flag: 64,
            bounce: false
        } expireAt_;
    }

    function rateId() external view responsible returns (uint64 rate) {
        return {
            value: 0,
            flag: 64,
            bounce: false
        } rateId_;
    }

    // it's responsible but very expensive to use on-chain
    function getJson() external override view responsible returns (string json) {
        Attributes[] attributes = new INftInfoStructure.Attributes[](2);
        attributes[0] = Attributes("expireAt", format("{}", expireAt_) );
        attributes[1] = Attributes("rateId", format("{}", rateId_) );

        NftInfo info = NftInfo(
             "Example name",              //name
             "Example description",   //description
             "",                      //previewUrl
             "image/jpeg",      //previewMimeType
             "",                          //fileUrl
             "image/png",           //fileMimeType
             attributes,
             "https://example.com"    //externalUrl
        );

        return {
            value: 0,
            flag: 64,
            bounce: false
        } NftJson.buildJson(_id, info);
    }

    function burn(
        address sendGasTo,
        address callbackTo,
        TvmCell callbackPayload
    ) public view {
        require(block.timestamp > expireAt_, 1001);
        require(msg.value > _indexDeployValue * 2 + 0.2 ever, 1002);

        _destructIndex(sendGasTo);

        IBurnableCollection(_collection).acceptNftBurn{
                value: 0,
                flag: 128 + 32,
                bounce: false
            }(
            _id,
            _owner,
            _manager,
            sendGasTo,
            callbackTo,
            callbackPayload
        );
    }

    /////////

    function _beforeTransfer(
        address /*to*/,
        address sendGasTo,
        mapping(address => CallbackParams) /*callbacks*/
    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
        TIP4_3Nft._destructIndex(sendGasTo);
    }

    function _afterTransfer(
        address /*to*/,
        address /*sendGasTo*/,
        mapping(address => CallbackParams) /*callbacks*/
    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
        TIP4_3Nft._deployIndex();
    }

    function _beforeChangeOwner(
        address /*oldOwner*/,
        address /*newOwner*/,
        address sendGasTo,
        mapping(address => CallbackParams) /*callbacks*/
    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
        TIP4_3Nft._destructIndex(sendGasTo);
    }

    function _afterChangeOwner(
        address /*oldOwner*/,
        address /*newOwner*/,
        address /*sendGasTo*/,
        mapping(address => CallbackParams) /*callbacks*/
    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
        TIP4_3Nft._deployIndex();
    }

    function _beforeChangeManager(
        address oldManager,
        address newManager,
        address sendGasTo,
        mapping(address => CallbackParams) callbacks
    ) internal virtual override {
        oldManager; newManager; sendGasTo; callbacks;
    }

    function _afterChangeManager(
        address oldManager,
        address newManager,
        address sendGasTo,
        mapping(address => CallbackParams) callbacks
    ) internal virtual override {
        oldManager; newManager; sendGasTo; callbacks;
    }
}
